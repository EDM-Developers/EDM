name: CMake

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:

  build-linux:
    runs-on: linux
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        path: x64
    - name: Configure CMake
      working-directory: ${{github.workspace}}/x64
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
    - name: Build plugin
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --target edm_plugin --parallel 8
    - name: Install plugin
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --target install

  build-mac-arm:
    runs-on: macos
    steps:
    - name: Checkout a copy to compile for ARM
      uses: actions/checkout@v2
      with:
        path: arm
    - name: Configure CMake
      working-directory: ${{github.workspace}}/arm
      run: ARMMODE=1 VCPKG_TARGET_TRIPLET=arm64-osx env /usr/bin/arch -arm64 cmake -B build -DCMAKE_BUILD_TYPE=Release
    - name: Build plugin
      working-directory: ${{github.workspace}}/arm
      run: env /usr/bin/arch -arm64 cmake --build build --target edm_plugin --parallel 8
    - name: Install plugin
      working-directory: ${{github.workspace}}/arm
      run: env /usr/bin/arch -arm64 cmake --build build --target install

  build-mac-x64:
    runs-on: macos
    steps:
    - name: Checkout a copy to compile for x86
      uses: actions/checkout@v2
      with:
        path: x64
    - name: Configure CMake
      working-directory: ${{github.workspace}}/x64
      run: env /usr/bin/arch -x86_64 cmake -B build -DCMAKE_BUILD_TYPE=Release
    - name: Build plugin
      working-directory: ${{github.workspace}}/x64
      run: env /usr/bin/arch -x86_64 cmake --build build --target edm_plugin --parallel 8
    - name: Install plugin
      working-directory: ${{github.workspace}}/x64
      run: env /usr/bin/arch -x86_64 cmake --build build --target install

  build-windows:
    runs-on: windows
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        path: x64
    - name: Configure CMake
      working-directory: ${{github.workspace}}/x64
      run: cmake -B build
    - name: Build plugin
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --config Release --target edm_plugin
    - name: Install plugin
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --config Release --target install

  int-test-linux:
    runs-on: linux
    needs: build-linux
    steps:
    - name: Prepare integration test
      working-directory: ${{github.workspace}}/x64/test
      run: mv ci-test.log reference.log
    - name: Run integration test
      working-directory: ${{github.workspace}}/x64/test
      run: stata -e -q ci-test.do Euclidean
    - name: Check test results
      working-directory: ${{github.workspace}}/x64/test
      run: diff -B reference.log ci-test.log

  unit-test-asan-linux:
    runs-on: linux
    needs: int-test-linux
    steps:
    - name: Wipe the previous build
      run: rm -rf ${{github.workspace}}/x64/build
    - name: Configure CMake
      working-directory: ${{github.workspace}}/x64
      run: cmake -B build -DCMAKE_BUILD_TYPE=Debug
    - name: Build unit tests with address sanitizer
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --target edm_test --parallel 8
    - name: Build CLI with address sanitizer
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --target edm_cli --parallel 8
    - name: Install unit tests
      working-directory: ${{github.workspace}}/x64
      run: cp build/edm_test test
    - name: Install CLI
      working-directory: ${{github.workspace}}/x64
      run: cp build/edm_cli test
    - name: Run unit tests with address sanitizer
      working-directory: ${{github.workspace}}/x64/test
      run: ./edm_test
    - name: Run CLI test with address sanitizer
      working-directory: ${{github.workspace}}/x64/test
      run: ./edm_cli ci-test.json

  int-test-mac-arm:
    runs-on: macos
    needs: build-mac-arm
    steps:
    - name: Prepare integration test
      working-directory: ${{github.workspace}}/arm/test
      run: mv ci-test.log reference.log
    - name: Run integration test
      working-directory: ${{github.workspace}}/arm/test
      run: env /usr/bin/arch -arm64 /Applications/Stata/StataMP.app/Contents/MacOS/StataMP -e -q ci-test.do Euclidean
    - name: Check test results
      working-directory: ${{github.workspace}}/arm/test
      run: diff -B reference.log ci-test.log

  unit-test-asan-mac-arm:
    runs-on: macos
    needs: int-test-mac-arm
    steps:
    - name: Wipe the previous build
      working-directory: ${{github.workspace}}/arm
      run: rm -rf build
    - name: Configure CMake
      working-directory: ${{github.workspace}}/arm
      run: cmake -B build -DCMAKE_BUILD_TYPE=Debug
    - name: Build unit tests with address sanitizer
      working-directory: ${{github.workspace}}/arm
      run: cmake --build build --target edm_test --parallel 8
    - name: Build CLI with address sanitizer
      working-directory: ${{github.workspace}}/arm
      run: cmake --build build --target edm_cli --parallel 8
    - name: Install unit tests
      working-directory: ${{github.workspace}}/arm
      run: cp build/edm_test test
    - name: Install CLI
      working-directory: ${{github.workspace}}/arm
      run: cp build/edm_cli test
    - name: Run unit tests with address sanitizer
      working-directory: ${{github.workspace}}/arm/test
      run: ./edm_test
    - name: Run CLI test with address sanitizer
      working-directory: ${{github.workspace}}/arm/test
      run: ./edm_cli ci-test.json

  int-test-mac-x64:
    runs-on: macos
    needs: build-mac-x64
    steps:
    - name: Prepare integration test
      working-directory: ${{github.workspace}}/x64/test
      run: mv ci-test.log reference.log
    - name: Run integration test
      working-directory: ${{github.workspace}}/x64/test
      run: env /usr/bin/arch -x86_64 /Applications/Stata/StataMP.app/Contents/MacOS/StataMP -e -q ci-test.do Euclidean
    - name: Check test results
      working-directory: ${{github.workspace}}/x64/test
      run: diff -B reference.log ci-test.log

  unit-test-asan-mac-x64:
    runs-on: macos
    needs: int-test-mac-x64
    steps:
    - name: Wipe the previous build
      working-directory: ${{github.workspace}}/x64
      run: rm -rf build
    - name: Configure CMake
      working-directory: ${{github.workspace}}/x64
      run: env /usr/bin/arch -x86_64 cmake -B build -DCMAKE_BUILD_TYPE=Debug
    - name: Build unit tests with address sanitizer
      working-directory: ${{github.workspace}}/x64
      run: env /usr/bin/arch -x86_64 cmake --build build --target edm_test --parallel 8
    - name: Build CLI with address sanitizer
      working-directory: ${{github.workspace}}/x64
      run: env /usr/bin/arch -x86_64 cmake --build build --target edm_cli --parallel 8
    - name: Install unit tests
      working-directory: ${{github.workspace}}/x64
      run: cp build/edm_test test
    - name: Install CLI
      working-directory: ${{github.workspace}}/x64
      run: cp build/edm_cli test
    - name: Run unit tests with address sanitizer
      working-directory: ${{github.workspace}}/x64/test
      run: env /usr/bin/arch -x86_64 ./edm_test
    - name: Run CLI test with address sanitizer
      working-directory: ${{github.workspace}}/x64/test
      run: env /usr/bin/arch -x86_64 ./edm_cli ci-test.json

  int-test-windows:
    runs-on: windows
    needs: build-windows
    steps:
    - name: Prepare integration test
      working-directory: ${{github.workspace}}/x64/test
      run: mv ci-test.log reference.log
    - name: Run integration test
      working-directory: ${{github.workspace}}/x64/test
      run: cmd.exe /c "C:\Program Files\Stata17\StataMP-64.exe" -e -q ci-test.do Euclidean
    - name: Check test results
      working-directory: ${{github.workspace}}/x64/test
      run: cmd.exe /c "fc /W reference.log ci-test.log"

  unit-test-asan-windows:
    runs-on: windows
    needs: int-test-windows
    steps:
    - name: Build unit tests (todo -- need to get Debug version working here)
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --config Release --target edm_test
    - name: Build CLI with address sanitizer
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --config Debug --target edm_cli
    - name: Install unit tests
      working-directory: ${{github.workspace}}/x64
      run: cp build/Release/edm_test.exe test
    - name: Install CLI
      working-directory: ${{github.workspace}}/x64
      run: cp build/Debug/edm_cli.exe test
    - name: Run unit tests
      working-directory: ${{github.workspace}}/x64/test
      run: .\edm_test.exe
    - name: Run CLI test with address sanitizer
      working-directory: ${{github.workspace}}/x64/test
      run: .\edm_cli.exe ci-test.json

  speed-test-linux:
    runs-on: linux
    needs: build-linux
    steps:
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/x64/test
      run: stata -e -q speed-test.do

  speed-test-mac-arm:
    runs-on: macos
    needs: build-mac-arm
    steps:
    - name: Get the correct plugin
      working-directory: ${{github.workspace}}/arm
      run: cp bin/edm_MacOSX_arm.plugin test/edm.plugin
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/arm/test
      run: env /usr/bin/arch -arm64 /Applications/Stata/StataMP.app/Contents/MacOS/StataMP -e -q speed-test.do

  speed-test-mac-x64:
    runs-on: macos
    needs: build-mac-x64
    steps:
    - name: Get the correct plugin
      working-directory: ${{github.workspace}}/x64
      run: cp bin/edm_MacOSX_x64.plugin test/edm.plugin
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/x64/test
      run: env /usr/bin/arch -x86_64 /Applications/Stata/StataMP.app/Contents/MacOS/StataMP -e -q speed-test.do

  speed-test-windows:
    runs-on: windows
    needs: build-windows
    steps:
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/x64/test
      run: cmd.exe /c "C:\Program Files\Stata17\StataMP-64.exe" -e -q speed-test.do

  big-data-speed-test-linux:
    runs-on: linux
    needs: build-linux
    steps:
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/x64/test
      run: stata -e -q big-data-speed-test.do

  big-data-speed-test-mac-arm:
    runs-on: macos
    needs: build-mac-arm
    steps:
    - name: Get the correct plugin
      working-directory: ${{github.workspace}}/arm
      run: cp bin/edm_MacOSX_arm.plugin test/edm.plugin
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/arm/test
      run: env /usr/bin/arch -arm64 /Applications/Stata/StataMP.app/Contents/MacOS/StataMP -e -q big-data-speed-test.do

  big-data-speed-test-mac-x64:
    runs-on: macos
    needs: build-mac-x64
    steps:
    - name: Get the correct plugin
      working-directory: ${{github.workspace}}/x64
      run: cp bin/edm_MacOSX_x64.plugin test/edm.plugin
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/x64/test
      run: env /usr/bin/arch -x86_64 /Applications/Stata/StataMP.app/Contents/MacOS/StataMP -e -q big-data-speed-test.do

  big-data-speed-test-windows:
    runs-on: windows
    needs: build-windows
    steps:
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/x64/test
      run: cmd.exe /c "C:\Program Files\Stata17\StataMP-64.exe" -e -q big-data-speed-test.do

  single-thread-speed-test-linux:
    runs-on: linux
    needs: build-linux
    steps:
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/x64/test
      run: stata -e -q single-thread-speed-test.do

  single-thread-speed-test-mac-arm:
    runs-on: macos
    needs: build-mac-arm
    steps:
    - name: Get the correct plugin
      working-directory: ${{github.workspace}}/arm
      run: cp bin/edm_MacOSX_arm.plugin test/edm.plugin
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/arm/test
      run: env /usr/bin/arch -arm64 /Applications/Stata/StataMP.app/Contents/MacOS/StataMP -e -q single-thread-speed-test.do

  single-thread-speed-test-mac-x64:
    runs-on: macos
    needs: build-mac-x64
    steps:
    - name: Get the correct plugin
      working-directory: ${{github.workspace}}/x64
      run: cp bin/edm_MacOSX_x64.plugin test/edm.plugin
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/x64/test
      run: env /usr/bin/arch -x86_64 /Applications/Stata/StataMP.app/Contents/MacOS/StataMP -e -q single-thread-speed-test.do

  single-thread-speed-test-windows:
    runs-on: windows
    needs: build-windows
    steps:
    - name: Run integration benchmark
      working-directory: ${{github.workspace}}/x64/test
      run: cmd.exe /c "C:\Program Files\Stata17\StataMP-64.exe" -e -q single-thread-speed-test.do

  build-gpu-linux:
    runs-on: linux
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        path: gpu
    - name: Configure CMake
      working-directory: ${{github.workspace}}/gpu
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DEDM_WITH_ARRAYFIRE=ON
    - name: Build plugin
      working-directory: ${{github.workspace}}/gpu
      run: cmake --build build --target edm_plugin --parallel 8
    - name: Install plugin
      working-directory: ${{github.workspace}}/gpu
      run: cmake --build build --target install

  build-gpu-windows:
    runs-on: windows
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        path: gpu
    - name: Configure CMake
      working-directory: ${{github.workspace}}/gpu
      run: cmake -B build -DEDM_WITH_ARRAYFIRE=ON -DArrayFire_DIR=C:\dev\ArrayFire\v3\cmake
    - name: Build plugin
      working-directory: ${{github.workspace}}/gpu
      run: cmake --build build --config Release --target edm_plugin
    - name: Install plugin
      working-directory: ${{github.workspace}}/gpu
      run: cmake --build build --config Release --target install
